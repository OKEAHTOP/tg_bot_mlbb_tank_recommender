import os
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
def load_tanks(filename="tanks.txt"):
    tanks = {}
    if not os.path.exists(filename):
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return tanks
    with open(filename, encoding="utf-8") as f:
        for line in f:
            parts = line.strip().split('. ')
            if len(parts) != 4:
                continue
            name = parts[0].lower()
            counters = [x.strip().lower() for x in parts[1].split(',') if x.strip()]
            countered_by = [x.strip().lower() for x in parts[2].split(',') if x.strip()]
            synergy = [x.strip().lower() for x in parts[3].split(',') if x.strip()]
            tanks[name] = {
                'roles': [],
                'counters': counters,
                'countered_by': countered_by,
                'synergy': synergy
            }
    return tanks

def load_heroes(filename="heroes.txt"):
    heroes = []
    if not os.path.exists(filename):
        print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return heroes
    with open(filename, encoding="utf-8") as file:
        for line in file:
            parts = re.split(r'\.\s*', line.strip())
            if len(parts) < 2:
                continue
            hero = {
                'name': parts[0].lower(),
                'roles': [r.strip().lower() for r in parts[1].split(',')],
                'counters': [x.strip().lower() for x in parts[2].split(',')] if len(parts) > 2 else [],
                'countered_by': [x.strip().lower() for x in parts[3].split(',')] if len(parts) > 3 else [],
                'synergy': [x.strip().lower() for x in parts[4].split(',')] if len(parts) > 4 else []
            }
            heroes.append(hero)
    return heroes

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}
tanks = load_tanks()
heroes = load_heroes()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üèÜ –í–≤–æ–¥ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –∏ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤", callback_data='recommend_mode')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –≥–µ—Ä–æ–µ", callback_data='hero_info_mode')]
    ]
    return InlineKeyboardMarkup(keyboard)

def back_to_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

def change_choice_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", callback_data='recommend_mode')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_data[user_id] = {'state': None}
    
    update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å –≥–µ—Ä–æ–µ–≤ –¥–ª—è Mobile Legends! üéÆ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=main_menu_keyboard()
    )

# –†–µ–∂–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ—Ä–æ–µ
def hero_info_mode(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.effective_user.id
    user_data[user_id] = {'state': 'hero_info'}
    
    query.answer()
    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=back_to_menu_keyboard()
    )

# –†–µ–∂–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
def recommend_mode(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = update.effective_user.id
    user_data[user_id] = {'state': 'allies_input'}
    
    query.answer()
    query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Å–æ—é–∑–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ª–æ–ª–∏—Ç–∞ —Ñ–ª–æ—Ä–∏–Ω –∞—Ç–ª–∞—Å):",
        reply_markup=back_to_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context: CallbackContext):
    
    user_id = update.effective_user.id
    text = update.message.text.strip().lower()


    
    if user_id not in user_data or user_data[user_id]['state'] is None:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=main_menu_keyboard())
        return
    
    state = user_data[user_id]['state']
    
    if state == 'hero_info':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ—Ä–æ–µ
        name = text
        found = next((h for h in heroes if h['name'] == name), None)
        
        if not found:
            update.message.reply_text(
                f"–ì–µ—Ä–æ–π '{name.capitalize()}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:",
                reply_markup=back_to_menu_keyboard()
            )
            return
        
        roles = found['roles']
        counters = set(found['counters'])
        countered_by = set(found['countered_by'])
        synergy = set(found['synergy'])
        
        # –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ tanks.txt –µ—Å–ª–∏ —Ä–æ–ª—å —Ä–æ—É–º
        if '—Ä–æ—É–º' in roles and name in tanks:
            tank_data = tanks[name]
            counters.update(tank_data['counters'])
            countered_by.update(tank_data['countered_by'])
            synergy.update(tank_data['synergy'])
        
        response = f"=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ '{name.capitalize()}' ===\n"
        response += f"–†–æ–ª–∏: {', '.join(r.capitalize() for r in roles)}\n"
        if counters:
            response += f"–ö–æ–Ω—Ç—Ä–∏—Ç: {', '.join(sorted(c.capitalize() for c in counters))}\n"
        if countered_by:
            response += f"–ö–æ–Ω—Ç—Ä–∏—Ç—Å—è: {', '.join(sorted(c.capitalize() for c in countered_by))}\n"
        if synergy:
            response += f"–°–∏–Ω–µ—Ä–≥–∏—è —Å: {', '.join(sorted(s.capitalize() for s in synergy))}\n"
        response += "==================================="
        
        update.message.reply_text(response, reply_markup=back_to_menu_keyboard())
        user_data[user_id]['state'] = None
    
    elif state == 'allies_input':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—é–∑–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–∞–∂–µ—Å–∫–∏—Ö
        user_data[user_id]['allies'] = text.split()
        user_data[user_id]['state'] = 'enemies_input'
        
        update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:",
            reply_markup=back_to_menu_keyboard()
        )
    
    elif state == 'enemies_input':
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞–∂–µ—Å–∫–∏—Ö –≥–µ—Ä–æ–µ–≤ –∏ –≤—ã–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        enemies = text.split()
        allies = user_data[user_id].get('allies', [])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–∏–Ω–≥ —Å–æ—é–∑–Ω–∏–∫–æ–≤ –≤—Ä–∞–≥–∞–º–∏
        warnings = []
        for enemy in enemies:
            if enemy in tanks:
                for ally in allies:
                    if ally in tanks[enemy]['counters']:
                        warnings.append(f"‚ö†Ô∏è –í—Ä–∞–≥ {enemy.capitalize()} –∫–æ–Ω—Ç—Ä–∏—Ç –≤–∞—à–µ–≥–æ —Å–æ—é–∑–Ω–∏–∫–∞ {ally.capitalize()}!")
        
        if warnings:
            update.message.reply_text("\n".join(warnings))
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = []
        for tank, data in tanks.items():
            if any(enemy in data['countered_by'] for enemy in enemies):
                continue
            cnt_counters = sum(1 for enemy in enemies if enemy in data['counters'])
            cnt_synergy = sum(1 for ally in allies if ally in data['synergy'])
            priority = cnt_counters + cnt_synergy * 0.5
            if priority > 0:
                recommendations.append({
                    'name': tank,
                    'roles': data['roles'],
                    'counters': [e for e in enemies if e in data['counters']],
                    'synergy': [a for a in allies if a in data['synergy']],
                    'priority': priority
                })
        
        recommendations.sort(key=lambda x: x['priority'], reverse=True)
        
        if not recommendations:
            update.message.reply_text(
                "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.",
                reply_markup=change_choice_keyboard()
            )
            return
        
        response = "=== –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º ===\n"
        for rec in recommendations[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–º 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            name = rec['name'].capitalize()
            roles = ', '.join(role.capitalize() for role in rec['roles']) if rec['roles'] else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'
            response += f"\n{name} ({roles}):\n"
            if rec['counters']:
                response += f"  +{len(rec['counters'])} –∑–∞ –∫–æ–Ω—Ç—Ä: {', '.join(e.capitalize() for e in rec['counters'])}\n"
            if rec['synergy']:
                response += f"  +{len(rec['synergy']) * 0.5} –∑–∞ —Å–∏–Ω–µ—Ä–≥–∏—é —Å: {', '.join(a.capitalize() for a in rec['synergy'])}\n"
            response += f"  –í—Å–µ–≥–æ –æ—á–∫–æ–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: {rec['priority']}\n"
        
        response += "==================================="
        
        update.message.reply_text(response, reply_markup=change_choice_keyboard())
        user_data[user_id]['state'] = None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    
    if query.data == 'hero_info_mode':
        hero_info_mode(update, context)
    elif query.data == 'recommend_mode':
        recommend_mode(update, context)
    elif query.data == 'back_to_menu':
        user_id = update.effective_user.id
        user_data[user_id] = {'state': None}
        query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=main_menu_keyboard()
        )

def main():
    TOKEN = "8001446088:AAH34RwK3mHP3FNKxoDlpxcbfxo8SZfRbTo"
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏ –≥—Ä—É–ø–ø–∞—Ö)
    dp.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /start@username_bot (–¥–ª—è –≥—Ä—É–ø–ø)
    dp.add_handler(MessageHandler(
        Filters.regex(r'^/start@[a-zA-Z0-9_]+_bot$') & Filters.chat_type.groups,
        start
    ))

    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()